function winding = GetWinding_v4( V )
%%%GETWINDING_V4 get the nontrivial winding for a given set of occupied states
%
% V is a matrix of [n,occ,Nk] which is the occ states in the 1D BZ. Nk is the number of k-point in
% the BZ, n is the dim of the Hamiltonian, occ is the number of occ states. Normally, n=2^D, for an 
% integer D.
%
% The way we compute the winding is to compute the spin expectation. In particular, we pick the 2^D
% dimensional representaiton of the spin group. We shall pick any two components that are NOT
% constant, and calculate the winding for them. The reason that this is valid can be seen as
% following: In a generic M-dimensional space, the projection of a 1D curve onto any 2D sub-manifold
% will be a 1D curve, unless it is generate. Thus the winding number of 1D curve can be figured out
% by projecting it onto ANY 2D sub-manifold, in this case, we do it via calculating the spin
% expectation. The spin algebra will be generated by the 2^D dim Clifford algebra. 


n = size( V , 1 ) ; 
% occ = size( V , 2 ) ; 
Nk = size( V , 3 ) ; 
dk = 2*pi/Nk ; 
krange = -pi : dk : (pi-dk) ;

D = log(n) / log(2) ; 
Gamma = GetGammaMatrices( D ) ; % Gamma is a matrix of size [2^D , 2^D , 2*D+1]

spinExp = zeros( 2*D+1 , Nk ) ; 
for z = 1 : Nk
    for zz = 1 : 2*D+1
        spinExp( zz , z ) = trace( V( : , : , z )' * Gamma( : , : , zz ) * V( : , : , z ) ) ; 
    end
end

h = zeros( 2 , Nk ) ; % hx and hy as a function of k
which = zeros(1,2) ; 
flag = 0 ; 
for z = 1 : (2*D+1) 
    % Get the derivative of spinExp(z , Nk) as a function of k
    spinExp_der = ( spinExp( z , 2:end) - spinExp( z , 1:(end-1) ) ) / dk ; 
    if max( abs( spinExp_der ) ) < 0.1 
        % The derivative is constalty zero ,so spinExp(z,Nk) is a const, then we do nothing
    else
        flag = flag + 1 ; 
        h(flag , : ) = spinExp( z , : ) ; 
        which(flag) = z ; 
        if flag==2
            % We found hx and hy
            break ;
        end
    end
end

U = h(1,:) + 1i * h(2,:) ; 

angleU = angle( U ) ; 

diff_angleU = angleU( 2 : end ) - angleU( 1 : end-1 ) ; 

epsilon = pi ; % This is the value beyond which we say there is a winding. This is picked randomly for now

winding = zeros( size( diff_angleU ) ) ; 
winding( abs(diff_angleU) > epsilon ) = sign( diff_angleU( abs(diff_angleU) > epsilon ) ) ; 

% figure ;
% plot( krange , spinExp ) ;
% legend('1','2','3','4','5') ; 
% title( num2str( which ) ) ; 
% axis tight ; 
% grid on ; 
% 
% figure ; 
% plot( 1 : length( diff_angleU ) , diff_angleU , 1 : length( diff_angleU ) , winding ) ; 
% 
% figure ; 
% subplot(1,2,1) ; 
% scatter( h( 1 , : ) , h( 2 , : ) ) ; 
% grid on ; 
% axis tight ; 
% subplot(1,2,2) ; 
% plot( atan( h(2,:) ./ h(1,:) ) ) ; 


winding = sum( winding ) ; 


end