function winding = GetWinding_v5( V )
%%%GETWINDING_V4 get the nontrivial winding for a given set of occupied states
%
% V is a matrix of [n,occ,Nk] which is the occ states in the 1D BZ. Nk is the number of k-point in
% the BZ, n is the dim of the Hamiltonian, occ is the number of occ states. Normally, n=2^D, for an 
% integer D.
%
% The way we compute the winding is to compute the spin expectation. In particular, we pick the 2^D
% dimensional representaiton of the spin group. We shall pick any two components that are NOT
% constant, and calculate the winding for them. The reason that this is valid can be seen as
% following: In a generic M-dimensional space, the projection of a 1D curve onto any 2D sub-manifold
% will be a 1D curve, unless it is generate. Thus the winding number of 1D curve can be figured out
% by projecting it onto ANY 2D sub-manifold, in this case, we do it via calculating the spin
% expectation. The spin algebra will be generated by the 2^D dim Clifford algebra. 
%
% It turns out this isn't quite corret. Let's do it the following way. We shall still pick a GOOD
% basis in which the curve is d_i\Gamma2(i) for i=1,2. We pick V(-pi) as \Gamma2(1), then we evolve k
% such that we find the vector that is orthogonal to V(-pi), which we shall set to \Gamma2(2). We shall
% then figure out all other \Gamma2(j) which are orthgonal to \Gamma2(1,2). We shall check that
% \Gamma2(j) are orthogonal to the whole curve to confirm that the curve is on a plane. If not, then
% we are DOOM. If this is confirmed, then we shall project the curve to these two \Gamma2(1,2) to
% find the vector h_{1,2} from which we can find the winding. 


n = size( V , 1 ) ; 
% occ = size( V , 2 ) ; 
Nk = size( V , 3 ) ; 
dk = 2*pi/Nk ; 
krange = -pi : dk : (pi-dk) ;

D = log(n) / log(2) ; 
Gamma = GetGammaMatrices( D ) ; % Gamma is a matrix of size [2^D , 2^D , 2*D+1]

spinExp = zeros( 2*D+1 , Nk ) ; 
for z = 1 : Nk
    for zz = 1 : 2*D+1
        spinExp( zz , z ) = trace( V( : , : , z )' * Gamma( : , : , zz ) * V( : , : , z ) ) ; 
    end
end

winding = GetWindingforCurve( spinExp ) ; 

% figure ;
% plot( krange , spinExp ) ;
% legend('1','2','3','4','5') ; 
% axis tight ; 
% grid on ; 


end